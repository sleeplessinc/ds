#!/usr/bin/env node

var http	= require( 'http' );
var url		= require( 'url' );

var DS		= require( '../' ).DS;
var store	= new DS( './ds.json' );

http.ServerResponse.prototype.writeJSON = function( json ) {
	this.write( JSON.stringify( json ) );

	this.end();
}

http.ServerResponse.prototype.error	= function( err ) {
	this.writeJSON( { 'err' : err } );
}

http.ServerResponse.prototype.success	= function( msg ) {
	this.writeJSON( { 'ok' : msg } );
}

var saveInterval	= 0;

function listener( req, res ) {
	var query	= url.parse( req.url, true ).query;

	var act		= query.act;
	var key		= query.key;

	if( typeof store[ key ] === 'function' ) {
		// reserved keyword, handle this better

		res.error( 'Reserved keyword specified!' );

		return;
	}

	switch( act ) {
		case 'get':
			var val = store[ key ];

			res.success( val );
		break;

		case 'set':
			var val = query.val;
			var ttl = ( parseInt( query.ttl ) >= 0 ) ? query.ttl : 0;

			if( ! val ) {
				delete store[ key ];

				res.success( 'Delete successful.' );
			} else {
				try {
					var parsed = JSON.parse( val );

					store[ key ] = parsed;

					if( ttl > 0 ) {
						setTimeout( function() {
							delete store[ key ];

							console.log( 'key %s expired out after %s seconds', key, ttl );

						}, ttl * 1000 );
					}

					res.success( 'Write successful.' );
				} catch( e ) {
					res.error( 'Invalid JSON specified!' );
				}
			}
		break;

		case 'del':
			delete store[ key ];

			res.success( 'Delete successful.' );
		break;

		case 'save':
			// force a cache save to disk
			console.log( 'saving cache (manual)...' );

			store.save();

			console.log( 'cache saved.' );

			res.success( 'Cache saved.' );
		break;

		case 'config':
			// manage the data store's state
			var autosave	= ( parseInt( query.autosave ) >= 0 ) ? query.autosave : 0;
			var file	= req.file;

			if( file ) {
				store.file = file;
			}
			
			if( autosave > 0 ) {
				saveInterval && clearInterval( saveInterval );

				saveInterval = setInterval( function() {
					console.log( 'saving cache...' );

					store.save();

					console.log( 'cache saved.' );
				}, autosave * 1000 );
			} else {
				console.log( 'disabling autosave.' );

				saveInterval && clearInterval( saveInterval );
			}

			res.success( 'Configuration updated.' );
		break;
	}

	console.log( store );
}

var server	= http.createServer( listener );

server.listen( 3000 );
